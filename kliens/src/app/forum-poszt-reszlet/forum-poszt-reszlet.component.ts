//Poszt r√©szlet(kommentek) oldal viselked√©s√©√©rt, m≈±k√∂d√©s√©√©rt felel≈ës ts
import { Component, OnInit, ViewChild, ElementRef, Renderer2 } from '@angular/core';
import { AuthService } from '../services/auth.service';
import { CommonModule, Location } from '@angular/common';
import { ActivatedRoute, Router } from '@angular/router';
import { ForumService } from '../services/forum.service';
import { FormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';


@Component({
  selector: 'app-forum-poszt-reszlet',
  imports: [CommonModule, FormsModule, RouterModule],
  templateUrl: './forum-poszt-reszlet.component.html',
  styleUrl: './forum-poszt-reszlet.component.css'
})
export class ForumPosztReszletComponent implements OnInit {
  @ViewChild('textarea') textarea!: ElementRef;
  temaSzin: string = '';
  temaSzin2: string = '';
  temaSzinN: string = '';
  temaSzinBetu: string = '';
  temaSzinHover: string = '';
  temaSzinGordulo: string = '';
  sotet: boolean = true;
  vilagos: boolean = false;
  voros: boolean = false;

  haBejelentkezett: boolean = false;
  posztok: any[] = [];
  poszt: any;
  komment: any;
  postId: number = -1;
  
  uzenetGombMegjelenites: boolean = true;
  uzenetKuldesMegjelenites: boolean = false;

  uzenet: string = '';

  hiba: boolean = false;
  hibaUzenet: string = '';

  kommentek: any[] = [];

  uzenetek: { [key: number]: string } = {};
  alUzenetek: { [key: number]: string } = {};  
  megnyitottKommentId: number | null = null;

  alKommentMegjelenites: boolean = false;
  megnyitottAlkommentId: number | null = null;

  felhasznaloNev: string = '';
  szerep: number = 2;

  constructor(private authservice: AuthService, private route: ActivatedRoute, private forumService: ForumService, private router: Router, private renderer: Renderer2, private location: Location) {}

  // Met√≥dus mely a felhaszn√°l√≥t visszair√°ny√≠tja az el≈ëz≈ë oldalra
  vissza(){
    this.location.back();
  }

  // Itt hajt√≥dik v√©gre a felhaszn√°l√≥ linkel√©se. Az adott tartalom el√© k√©sz√≠t egy linkel√©st a felhaszn√°l√≥ oldal√°ra
  linkeles(szoveg: string): string {
    const regex = /@([a-zA-Z√°√Å√©√â√≠√ç√≥√ì√∂√ñ≈ë≈ê√∫√ö√º√ú≈±≈∞a-zA-Z0-9_.-]+)/g;
    return szoveg.replace(regex, (tartalom, felhasznalonev) => {
      return `<a href="/forum/profil/${felhasznalonev}" class="felhasznalo-link">${tartalom}</a>`;
    });
  }

  // Felhaszn√°lja a linkeles()-t √©s alkalmazza azt az adott elemre
  szovegbolLink(element: HTMLElement, szoveg: string) {
    const linkreformalt = this.linkeles(szoveg);
    this.renderer.setProperty(element, 'innerHTML', linkreformalt);
  }

  // Itt ker√ºlnek bet√∂lt√©sre a posztok a forumService get k√©r√©s h√≠v√°s√°val a backendb≈ël
  posztBetoltes(): void {
    this.forumService.getPosts().subscribe(
      (response) => {
        this.posztok = response.map((poszt: any) => ({
          ...poszt,
          // Elteltid≈ë t√°rol√°sa
          elteltIdo: this.elteltIdoSzamitasa(poszt.elkuldve),
          // Megvizsg√°lja felhaszn√°l√≥n√©v egyez√©s alapj√°n hogy a bejelentkezett felhaszn√°l√≥hoz tartozik-e az adott poszt. Ennek logikai √©rt√©k√©t a "sajatFelhasznalo" v√°lt√≥z√≥ban t√°rolja el.
          sajatFelhasznalo: poszt.felhasznalo === this.felhasznaloNev
        }));


        // Jelenlegi url t√°rol√°sa v√°ltoz√≥ban, majd v√°ltoz√≥b√≥l kinyerni az poszt (id) azonos√≠t√≥t a posztIdUrlbol() seg√≠ts√©g√©vel √©s posztId v√°ltoz√≥ba elt√°rolni.
        const url = window.location.href;
        const posztId = this.posztIdUrlbol(url);
  
        // Kommentek lek√©r√©se az adott poszthoz. Lek√©rj√ºk backendb≈ël forumService-n √°t a kommenteket a posztId v√°ltoz√≥ seg√≠ts√©g√©vel.
        this.forumService.getComments(posztId).subscribe(
          (response) => {
            // Egy Map-ben elt√°roljuk a kommenteket, majd v√©gigiter√°lunk a visszaadott response-on.
            const kommentMap = new Map<number, any>();
            const foKommentek: any[] = [];
        
            // Minden kommenthez hozz√°adjuk a kor√°bban m√°r le√≠rt elteltIdo-t √©s a sajatFelhasznalo-t, illetve l√©trehozunk a kommenteknek egy alKommentek t√∂mb√∂t, ahov√° majd a kommentre √©rkez≈ë kommentek ker√ºlnek.
            response.forEach((komment: any) => {
              komment.elteltIdo = this.elteltIdoSzamitasa(komment.elkuldve);
              komment.sajatFelhasznalo = komment.felhasznalo === this.felhasznaloNev;
              komment.alKommmentek = [];
              // A Maphez hozz√°adjuk a komment id-t √©s a mag√°t a kommentet.
              kommentMap.set(komment.id, komment);
            });

            // A Map-b√≥l visszaadunk a f≈ëkommenteket, majd v√©gigiter√°lunk ≈ëket. Ha a komment kommentszuloja null, akkor a komment f≈ë komment,
            // mivel nincs sz√ºl≈ë kommentje √©s hozz√°adjuk a foKommentek t√∂mbh√∂z. Ha van, akkor a kommentet hozz√°adjuk az alKommentek t√∂mbbe. (Ezek lesznek a kommentekre √©rkez≈ë kommentek)
            response.forEach((komment: any) => {
              if (komment.kommentszulo === null) {
                foKommentek.push(komment);
              } else {
                const szuloKomment = kommentMap.get(komment.kommentszulo);
                if (szuloKomment) {
                  szuloKomment.alKommmentek.push(komment);
                }
              }
            });

            this.kommentek = foKommentek;
        
            //console.log('F≈ëkommentek:', this.kommentek);
            this.kommentek.forEach(komment => {
            //console.log('Alkommentek:', komment.alKommmentek);
            });
          },
          (error) => {
            console.error('Hiba t√∂rt√©nt a kommentek bet√∂lt√©sekor:', error);
          }
        );
  
        // Poszthoz tartoz√≥ adatok elt√°rol√°sa poszt v√°ltoz√≥ban melyet a posztokon val√≥ k√∂rbej√°r√°skor a jelenlegi poszt id √©s az adott poszt id egyez√©se alapj√°n f≈±z hozz√°.
        this.poszt = this.posztok.find(poszt => poszt.id === posztId);
  
        if (!this.poszt) {
          console.error('Poszt nem tal√°lhat√≥');
        } else {
          this.poszt.elteltIdo = this.elteltIdoSzamitasa(this.poszt.elkuldve);
          //console.log("Poszt:", this.poszt);
        }
      },
      (error) => {
        console.error('Hiba t√∂rt√©nt a poszt bet√∂lt√©sekor:', error);
      }
    );
  }
  // Poszt id (azonos√≠t√≥) kinyer√©s URL-b≈ël
  posztIdUrlbol(url: string): number {
    const regex = /forum\/(\d+)/;
    const match = url.match(regex);
    if (match) {
      return +match[1];
    } else {
      console.error('ID nem tal√°lhat√≥ az URL-ben');
      return -1;
    }
  }

  // Itt ker√ºl kisz√°mol√°sra hogy az adott poszt mennyi ideje lett l√©trehozva, mely a jelenlegi id≈ë √©s a l√©trehoz√°s idej√©b≈ël sz√°molva ker√ºl meghat√°roz√°sra benne
  elteltIdoSzamitasa(datum: string): string {
    const posztDatum = new Date(datum);
    const jelenleg = new Date();
    const masodpercekben = Math.floor((jelenleg.getTime() - posztDatum.getTime()) / 1000);

    if (masodpercekben < 60) {
      return `${masodpercekben} m√°sodperce`;

    } else if (masodpercekben < 3600) {
      return `${Math.floor(masodpercekben / 60)} perce`;

    } else if (masodpercekben < 86400) {
      return `${Math.floor(masodpercekben / 3600)} √≥r√°ja`;

    } else if (masodpercekben < 2592000) {
      return `${Math.floor(masodpercekben / 86400)} napja`;

    } else if (masodpercekben < 31536000) {
      return `${Math.floor(masodpercekben / 2592000)} h√≥napja`;

    } else {
      return `${Math.floor(masodpercekben / 31536000)} √©ve`;
    }
  }

  // Poszt kedvel√©s. Poszt kedvel√©s k√©r√©st k√ºld a backendnek a forumService-n √°t.
  kedvelesClick(postId: number) {
    // A posztok t√∂mbben megkeresi az adott posztot az azonos√≠t√≥ja (id-ja) alapj√°n, ha nem tal√°lja akkor kil√©p retun-nel
    const poszt = this.posztok.find(p => p.id === postId);
    if (!poszt) return;

    // Amennyiben megtal√°lja a kedvelte v√°ltoz√≥t igazra √°ll√≠tja a kedvel√©s megjelen√≠t√©s miatt, illetve megn√∂veli +1el a kedveles v√°ltoz√≥t hogy azonnal megjelenjen a m√≥dosul√°sa a felhaszn√°l√≥n√°l
    poszt.kedvelte = true;
    poszt.kedveles += 1;

    //  Itt k√ºldi el a k√©r√©st a forumService-n √°t
    this.forumService.likePost(postId).subscribe(
      (response) => {
        //console.log('Kedvel√©s sikeresen megt√∂rt√©nt:', response);
      },
      // Hiba eset√©n vissza√°ll√≠tja a kedvelte logikai v√°ltoz√≥t, illetve a kedveles √©rt√©k√©t
      (error) => {
        console.error('Hiba t√∂rt√©nt a kedvel√©s meger≈ës√≠t√©s√©n√©l:', error);
        poszt.kedvelte = false;
        poszt.kedveles -= 1;
      }
    );
  }

  // Poszt kikedvel√©s. Poszt kikedvel√©s k√©r√©st k√ºld a backendnek a forumService-n √°t. Ugyanaz t√∂rt√©nik, mint a kedvel√©sn√©l.
  kikedvelesClick(postId: number) {
    const poszt = this.posztok.find(p => p.id === postId);
    if (!poszt) return;

    poszt.kedvelte = false;
    poszt.kedveles -= 1;

    this.forumService.dislikePost(postId).subscribe(
      (response) => {
        //console.log('Kikedvel√©s sikeresen megt√∂rt√©nt:', response);
      },
      (error) => {
        console.error('Hiba t√∂rt√©nt a kikedvel√©s meger≈ës√≠t√©s√©n√©l:', error);
        poszt.kedvelte = true;
        poszt.kedveles += 1;
      }
    );
  }

  // Poszt URL m√°sol√°s. Az adott poszt id-ja alapj√°n m√°solja az urlt. Az alap √∫tvonalat meghat√°rozza majd a v√©gponthoz a poszt azonos√≠t√≥j√°t √°ll√≠tja be √©s ezt url v√°ltoz√≥ba t√°rolja. Majd ezt a v√°ltoz√≥t m√°solja ki a navigator.clipboard.writeText-el 
  urlMasolas(postId: number) {
    const url = `${window.location.origin}/forum/${postId}`;
    navigator.clipboard.writeText(url).then(() => {
      alert('A poszt linkje kim√°solva! üìã');
    }).catch(err => {
      console.error('Hiba t√∂rt√©nt a m√°sol√°s sor√°n:', err);
    });
  }

  // Az adott √ºzenet k√ºld√©si keretre kattintva h√≠v√≥dik meg ez a met√≥dus.
  // A met√≥dus megnyitja az √ºzenetk√ºld√©si dobozt √©s annak √ºzenet√©t √ºresre √°ll√≠tja, ez amiatt kell ha t√∂bb helyre akar a felhaszn√°l√≥ √ºzenetet k√ºldeni ne jelen√≠tse meg az el≈ëz≈ëeket.
  uzenetKuldesMegjelenitesClick(){
    this.uzenetKuldesMegjelenites =!this.uzenetKuldesMegjelenites;

    if (this.uzenetKuldesMegjelenites) {
      this.uzenet = '';
    }

    this.uzenetGombMegjelenites = false;

    // Ennek seg√≠ts√©g√©vel f√≥kusz√°l bele (azaz teszi lehet≈ëv√© hogy egyb≈ël √≠rni lehessen bele) a sz√∂vegdobozba.
    // A k√©sleltet√©s az√©rt sz√ºks√©ges, mert nem mindig tudja nyomonk√∂vetni a rendszer az azonnali f√≥kusz√°l√°st, mert hamarabb f√≥kusz√°lna, minthogy megjelenne a sz√∂vegdoboz
    setTimeout(() => {
      this.textarea.nativeElement.focus();
    }, 50);
  }

  // mentes() hajtja v√©gre a posztra kommentel√©st melyn√©l megvizsg√°lja el≈ësz√∂r a poszt id j√°t, ha nem tal√°l ilyen posztot akkor returnol azaz megszak√≠tja a folyamatot.
  mentes(postId: number){
    const poszt = this.posztok.find(p => p.id === postId);
    if (!poszt) return;

    // adatok nev≈± obejtumban elt√°rolja a k√∂vetkez≈ë adatokat: poszt id, komment sz√∂vege
    const adatok = {
      posztid: postId,
      szoveg: this.uzenet
    }
    // Megn√∂veli a kommentek sz√°m√°t  a felhaszn√°l√≥nak hogy azonnal l√°ssa a friss√≠t√©s√©t

    poszt.kommentek += 1

    // Az obejtumot k√©r√©ssel elk√ºldi a backend fel√© a forumService-n √°t. Sikeres k√©r√©s eset√©n mindent vissza√°ll√≠t alap√©rtelmezettre majd
    // √Åtnavig√°lja ≈ët a f√≥rum f≈ëoldal√°ra √©s vissza a jelenlegi adott posztra (ezt olyan gyorsas√°ggal hogy a felhaszn√°l√≥ nem √©rz√©kel bel≈ële semmit)
    // Ezzel egyb≈ël friss√≠t√©st tapasztal a felhaszn√°l√≥ √©s l√°tni fogja a kommentj√©t
    this.forumService.addCommentToPost( adatok
    ).subscribe({
      next: (response) => {
        //console.log('Sikeres komment l√©trehoz√°s:', response);
        setTimeout(async () => {
          this.uzenetKuldesMegjelenites = false;
          this.uzenetGombMegjelenites = true;
          this.uzenet = '';
          const jelenlegiUrl = this.router.url;
          await this.router.navigate(['forum']);
          await this.router.navigate([jelenlegiUrl]);
        }, 50);
      },
      // Hiba eset√©n egy hiba√ºzenet jelenik meg, √©s vissza√°ll√≠tja a kommentek sz√°m√°t.
      error: (err) => {
        this.hiba = true;
        poszt.kommentek -= 1
        if (err.error?.message) {
          this.hibaUzenet = err.error.message;
        } else {
          this.hibaUzenet = "Ismeretlen hiba t√∂rt√©nt a komment l√©trehoz√°sa sor√°n!";
        }
      }
    });
  }

  // Bez√°rja a kommentel≈ë sz√∂vegdobozt
  bezar(){
    this.uzenetKuldesMegjelenites = false;
    this.uzenet = '';
    this.uzenetGombMegjelenites = true;
  }


  // Komment kedvel√©s. Komment kedvel√©s k√©r√©st k√ºld a backendnek a forumService-n √°t. Ugyanaz t√∂rt√©nik, mint a poszt kedvel√©sn√©l.

  kedvelesKommentClick(commentId: number) {
    const komment = this.kommentek.find(c => c.id === commentId);
    if (!komment) return;

    komment.kedvelte = true;
    komment.kedveles += 1;

    this.forumService.likeComment(commentId).subscribe(
      (response) => {
        //console.log('Komment kedvel√©s sikeresen megt√∂rt√©nt:', response);
      },
      (error) => {
        console.error('Hiba t√∂rt√©nt a komment kedvel√©s meger≈ës√≠t√©s√©n√©l:', error);
        komment.kedvelte = false;
        komment.kedveles -= 1;
      }
    );
  }

  // Komment kikedvel√©s. Komment kikedvel√©s k√©r√©st k√ºld a backendnek a forumService-n √°t. Ugyanaz t√∂rt√©nik, mint a poszt kikedvel√©sn√©l.
  kikedvelesKommentClick(commentId: number) {
    const komment = this.kommentek.find(c => c.id === commentId);
    if (!komment) return;

    komment.kedvelte = false;
    komment.kedveles -= 1;

    this.forumService.dislikeComment(commentId).subscribe(
      (response) => {
        //console.log('Komment Kikedvel√©s sikeresen megt√∂rt√©nt:', response);
      },
      (error) => {
        console.error('Hiba t√∂rt√©nt a komment kikedvel√©s meger≈ës√≠t√©s√©n√©l:', error);
        komment.kedvelte = true;
        komment.kedveles += 1;
      }
    );
  }

  // A komment k√ºld√©si sz√∂vegdoboz-t megjelen√≠tse
  kommentUzenetKuldesMegjelenitesClick(commentId: number) {
    // A kommentek t√∂mbben megkeresi az adott kommentet az azonos√≠t√≥ja (id-ja) alapj√°n, ha nem tal√°lja akkor kil√©p retun-nel
    const komment = this.kommentek.find(k => k.id === commentId);
    if (!komment) return;
  
    // felhaszn√°l√≥n√©vbe t√°roljuk a komment l√©trehoz√≥nak a felhaszn√°l√≥ nev√©t
    const felhasznaloNev = komment.felhasznalo;
  
    // Ha az √©ppen megnyitott komment megegyezik az aktu√°lisan kattintott kommentel, akkor bez√°rja a sz√∂vegdobozt
    if (this.megnyitottKommentId === commentId) {
      this.megnyitottKommentId = null;
    } else {
      //Ha nem egyezik, akkor megnyitja a sz√∂vegdobozt azt adott kommenthez.
      this.megnyitottKommentId = commentId;
  
      // Ha az uzenetek[commentId] nincs m√©g be√°ll√≠tva, vagy az adott felhaszn√°l√≥n√©vvel, akkor be√°ll√≠tja az √ºzenetet @felhasznaloNev form√°tumban.
      if (!this.uzenetek[commentId] || !this.uzenetek[commentId].startsWith(`@${felhasznaloNev} `)) {
        this.uzenetek[commentId] = `@${felhasznaloNev} `;
      }
    }
  }

    // mentesKomment() hajtja v√©gre a kommentre kommentel√©st melyn√©l megvizsg√°lja el≈ësz√∂r a komment id j√°t, ha nem tal√°l ilyen kommentet akkor returnol azaz megszak√≠tja a folyamatot.
  mentesKomment(commentId: number){
    const komment = this.kommentek.find(k => k.id === commentId);
    if (!komment) return;

    const adatok = {
      kommentid: commentId,
      szoveg: this.uzenetek[commentId]
    }

    komment.alkommentek += 1


    this.forumService.addCommentToComment( adatok
    ).subscribe({
    // Az obejtumot k√©r√©ssel elk√ºldi a backend fel√© a forumService-n √°t. Sikeres k√©r√©s eset√©n
    // √Åtnavig√°lja ≈ët a f√≥rum f≈ëoldal√°ra √©s vissza a jelenlegi adott posztra (ezt olyan gyorsas√°ggal hogy a felhaszn√°l√≥ nem √©rz√©kel bel≈ële semmit)
    // Ezzel egyb≈ël friss√≠t√©st tapasztal a felhaszn√°l√≥ √©s l√°tni fogja a kommentj√©t
      next: (response) => {
        //console.log('Sikeres komment l√©trehoz√°s:', response);
        setTimeout(async () => {
          this.uzenetek[commentId] = '';
          const jelenlegiUrl = this.router.url;
          await this.router.navigate(['forum']);
          await this.router.navigate([jelenlegiUrl]);
        }, 50);
      },
      error: (err) => {
        this.hiba = true;
        komment.alkommentek -= 1
        if (err.error?.message) {
          this.hibaUzenet = err.error.message;
        } else {
          this.hibaUzenet = "Ismeretlen hiba t√∂rt√©nt a komment l√©trehoz√°sa sor√°n!";
        }
      }
    });
  }

  // bez√°rKomment() hajtja v√©gre a komment bez√°r√°s√°t
  bezarKomment(commentId: number){
    this.megnyitottKommentId = null;
    this.uzenetek[commentId] = '';
  }

  // Az adott "v√°laszok megnyit√°s" -sz√∂vegre kattintva h√≠v√≥dik meg ez a met√≥dus.
  // A met√≥dus megnyitja a komment alatt tal√°lhat√≥ √∂sszes alkommentet
  alKommentMegjelenitesClick(commentId: number) {
    if (this.megnyitottAlkommentId === commentId) {
      this.megnyitottAlkommentId = null;
    } else {
      this.megnyitottAlkommentId = commentId;
    }
  }

  // Alkomment kedvel√©se, melynek k√©r√©st a forumService-n √°t a backendnek tov√°bb√≠tja. Az √∂sszes komment √∂sszes alKommmentek t√∂mbj√©t egyetlen t√∂mbb√© alak√≠tja
  // Megkeresi azt az alkommentet, amelynek az id-ja megegyezik a kattintott alkomment azonos√≠t√≥j√°val.
  // Ha nem tal√°lja a keresett alkommentet kil√©p return -nel a f√ºggv√©nyb≈ël
  kedvelesAlkommentClick(alkommentId: number) {
    const alkomment = this.kommentek
      .flatMap(k => k.alKommmentek)
      .find(a => a.id === alkommentId);
  
    if (!alkomment) return;
  
    // Amennyiben megtal√°lja a kedvelte v√°ltoz√≥t igazra √°ll√≠tja a kedvel√©s megjelen√≠t√©s miatt, illetve megn√∂veli +1el a kedveles v√°ltoz√≥t hogy azonnal megjelenjen a m√≥dosul√°sa a felhaszn√°l√≥n√°l
    alkomment.kedvelte = true;
    alkomment.kedveles += 1;

    this.forumService.likeComment(alkommentId).subscribe(
      (response) => {
        //console.log('Alkomment kedvel√©se sikeres:', response);
      },
      // Hiba eset√©n vissza√°ll√≠tja a kedvelte logikai v√°ltoz√≥t, illetve a kedveles √©rt√©k√©t
      (error) => {
        console.error('Hiba t√∂rt√©nt az alkomment kedvel√©sekor:', error);
        alkomment.kedvelte = false;
        alkomment.kedveles -= 1;
      }
    );
  }
  // Ugyanaz t√∂rt√©nik itt mint a kedvelesAlkommentClick-n√©l csak itt a kikedvel√©sre sz√≥l√≥an
  kikedvelesAlkommentClick(alkommentId: number) {
    const alkomment = this.kommentek
      .flatMap(k => k.alKommmentek)
      .find(a => a.id === alkommentId);
  
    if (!alkomment) return;
  
    alkomment.kedvelte = false;
    alkomment.kedveles -= 1;
  
    this.forumService.dislikeComment(alkommentId).subscribe(
      (response) => {
        //console.log('Alkomment kikedvel√©se sikeres:', response);
      },
      (error) => {
        console.error('Hiba t√∂rt√©nt az alkomment kikedvel√©sekor:', error);
        alkomment.kedvelte = true;
        alkomment.kedveles += 1;
      }
    );
  }

  // Az adott √ºzenet k√ºld√©si keretre kattintva h√≠v√≥dik meg ez a met√≥dus.
  // A met√≥dus megnyitja az √ºzenetk√ºld√©si dobozt.
  alKommentUzenetKuldesMegjelenitesClick(alkommentId: number, commentId: number) {
    //console.log("alKommentUzenetKuldesMegjelenitesClick megh√≠vva, commentId:", commentId);
  
    const alkomment = this.kommentek
      .flatMap(k => k.alKommmentek)
      .find(a => a.id === alkommentId);
  
    if (!alkomment) {
      //console.log("Nem tal√°lhat√≥ alkomment!");
      return;
    }
  
    const felhasznaloNev = alkomment.felhasznalo;
    //console.log("C√≠mzett neve:", felhasznaloNev);
  
    if (this.megnyitottKommentId === alkommentId) {
      //console.log("Bez√°r√°s");
      this.megnyitottKommentId = null;
    } else {
      //console.log("Megnyit√°s √©s @n√©v hozz√°ad√°sa");
      this.megnyitottKommentId = alkommentId;
  
      if (!this.uzenetek[commentId] || this.uzenetek[commentId].trim() === '') {
        this.uzenetek[commentId] = `@${felhasznaloNev} `;
      } 
      else if (!this.uzenetek[commentId].startsWith(`@${felhasznaloNev} `)) {
        this.uzenetek[commentId] = `@${felhasznaloNev} ` + this.uzenetek[commentId];
      }
    }
  
    //console.log("√öj megnyitottKommentId:", this.megnyitottKommentId);
    //console.log("Aktu√°lis √ºzenet:", this.uzenetek[commentId]);
  }
  

  // Itt ker√ºl elment√©sre az adott alKomment az alkomment id (azonos√≠t√≥ja alapj√°n)
  mentesAlKomment(alkommentId: number) {
    const komment = this.kommentek
      .flatMap(k => k.alKommmentek)
      .find(a => a.id === alkommentId);
    if (!komment) return;
  
    const adatok = {
      kommentid: alkommentId,
      szoveg: this.alUzenetek[alkommentId]
    };
  
    this.forumService.addCommentToComment(adatok).subscribe({
      next: (response) => {
        //console.log('Sikeres alkomment l√©trehoz√°s:', response);
        setTimeout(async () => {
          this.alUzenetek[alkommentId] = '';
          const jelenlegiUrl = this.router.url;
          await this.router.navigate(['forum']);
          await this.router.navigate([jelenlegiUrl]);
        }, 50);
      },
      error: (err) => {
        this.hiba = true;
        if (err.error?.message) {
          this.hibaUzenet = err.error.message;
        } else {
          this.hibaUzenet = "Ismeretlen hiba t√∂rt√©nt az alkomment l√©trehoz√°sa sor√°n!";
        }
      }
    });
  }

  // Bez√°rja az alkomment l√©trehoz√°s√°t
  bezarAlkomment(commentId: number){
    this.megnyitottKommentId = null;
    this.uzenetek[commentId] = '';
    this.alUzenetek[commentId] = '';
  }

  // Poszt t√∂r√∂l√©s. Poszt azonos√≠t√≥ (id) alapj√°n k√ºld t√∂rl√©si k√©relmet a backendnek a forumService-n √°t, majd sikeres v√°lasz eset√©n √°tnavig√°lja a felhaszn√°l√≥t a f√≥rum f≈ëoldal√°ra.
  posztTorles(postId: number){
    //console.log(postId);
    this.forumService.deletePost(postId).subscribe(
      (response) => {
        //console.log('Poszt sikeresen t√∂r√∂lve:', response);
        this.router.navigate(['forum']);
      },
      (error) => {
        console.error('Hiba t√∂rt√©nt a poszt t√∂rl√©s√©n√©l:', error);
      }
    );
  }

  // Komment t√∂r√∂l√©s. Komment azonos√≠t√≥ (id) alapj√°n k√ºld t√∂rl√©si k√©relmet a backendnek a forumService-n √°t, majd sikeres v√°lasz eset√©n
  // √Åtnavig√°lja ≈ët a f√≥rum f≈ëoldal√°ra √©s vissza a jelenlegi adott posztra (ezt olyan gyorsas√°ggal hogy a felhaszn√°l√≥ nem √©rz√©kel bel≈ële semmit)
  // Ezzel egyb≈ël friss√≠t√©st tapasztal a felhaszn√°l√≥ √©s t√∂rli a kommentj√©t
  kommentTorles(postId: number){
    //console.log(postId);
    this.forumService.deleteComment(postId).subscribe(
      (response) => {
        //console.log('Komment sikeresen t√∂r√∂lve:', response);
        setTimeout(async () => {
          const jelenlegiUrl = this.router.url;
          await this.router.navigate(['forum']);
          await this.router.navigate([jelenlegiUrl]);
        }, 50);
      },
      (error) => {
        console.error('Hiba t√∂rt√©nt a komment t√∂rl√©s√©n√©l:', error);
      }
    );
  }

  // Poszt √©s kommentek, alkommentek bet√∂lt√©se
  ngOnInit() {
    this.authservice.felhasznaloNev$.subscribe(nev => {
      this.felhasznaloNev = nev;
    });
    this.authservice.szerep$.subscribe(szerep => {
      this.szerep = szerep;
    });
    this.posztBetoltes();
    this.authservice.felhBejelentkezettE$.subscribe(bejelentkezettE => {
      this.haBejelentkezett = bejelentkezettE;
    });

    // t√©ma be√°ll√≠t√°s
    this.authservice.szamSzin$.subscribe( szam => {
      if(szam === 1){
        this.sotet = true;
        this.vilagos = false;
        this.voros = false
        this.temaSzin = 'feketeK';
        this.temaSzin2 = 'feketeK2';
        this.temaSzinN = 'feketeN';
        this.temaSzinBetu = 'feketeBetu';
        this.temaSzinHover = 'feketeH';
        this.temaSzinGordulo = 'feketeG';
      }
      else if(szam === 2){
        this.sotet = false;
        this.vilagos = true;
        this.voros = false;
        this.temaSzin = 'feherK';
        this.temaSzin2 = 'feherK2';
        this.temaSzinN = 'feherN';
        this.temaSzinBetu = 'feherBetu';
        this.temaSzinHover = 'feherH'
        this.temaSzinGordulo = 'feherG';
      }
      else if(szam === 3){
        this.sotet = false;
        this.vilagos = false;
        this.voros = true;
        this.temaSzin = 'vorosK';
        this.temaSzin2 = 'vorosK2';
        this.temaSzinN = 'vorosN';
        this.temaSzinBetu = 'vorosBetu';
        this.temaSzinHover = 'vorosH';
        this.temaSzinGordulo = 'vorosG';
      }else{
        this.sotet = true;
        this.vilagos = false;
        this.voros = false;
        this.temaSzin = 'feketeK';
        this.temaSzin2 = 'feketeK2';
        this.temaSzinN = 'feketeN';
        this.temaSzinBetu = 'feketeBetu';
        this.temaSzinHover = 'feketeH';
        this.temaSzinGordulo = 'feketeG';
      }
    });
  }
}
